[include]
    path = .gitconfig.local
[http]
    sslVerify = false
[user]
	name = Mátyás Budavári
	email = budavariam@gmail.com
[core]
    editor = vim
	excludesfile = ~/.gitignore
    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true
    ignorecase = false
[alias]
    # whoami - shows user and email settings from the local config file
    whoami = "!git config -l | grep '^user'| awk -F '=' '{print $2}'"
    # la - list aliases alphabetically
    la = "!git config -l | grep alias | cut -c 7- | sort | less"
    # root - Show the repository root folder
    root = rev-parse --show-toplevel
    # contributors - List contributors with number of commits
    contributors = shortlog --summary --numbered --email
    # cloneurl - get the remote url of the repository
    cloneurl = config --get remote.origin.url
    # allfiles - list all files that has ever been added to the repository, sorted by path
    allfiles = !git log --pretty=format: --name-only --diff-filter=A | sort -u
    # undelete - undelete a file to the last known state, you must use the full path, useful with grepped allfiles
    undelete = !sh -c 'git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"' -
    # delmerged - Remove branches that have already been merged with master a.k.a. ‘delete merged’
    delmerged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # lstmerged - List branches that have already been merged into master a.k.a. ‘list merged’
    lstmerged = "!git branch --merged | grep -v '\\*'"
    # recent - List recently visited branches
    recent = "!f() { git reflog | egrep -io 'moving from ([^[:space:]]+)' | awk '{ print $3 }' | awk ' !x[$0]++' | head -n${1-10}; }; f"
    # brage - List all branches ordered by committerdate, show refs and relative date
    brage = "branch -v --sort=-committerdate --format='%(authordate:short) %(color:red)%(objectname:short) %(color:yellow)%(refname:short)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset)) [%(color:magenta)%(authorname)%(color:reset)]'"
    # retag - Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
    # ctags -
    ctags = !.git/hooks/ctags
    # up - fetch & rebase instead of fetch & merge
    up = pull --rebase
    # undo - undo last commit in the local history, and print its commit message.
    undo = "!git log -1 --pretty=%B | cat; git reset HEAD~"
    # hreset - Hard reset, clear working directory. It keeps untracked files.
    hreset = reset --hard
    # creset - Stash all changes except staged, then drop them
    creset = "!git stash save --keep-index --include-untracked && git stash drop"
    # chr - Stash all changes, then drop them
    chr = "!git stash save --include-untracked && git stash drop"
    # standup - what I did yesterday or last friday (+adds format, %u day of week (1..7); 1 is Monday)
    standup = "!f() { [[ '1' -eq $(date +%u) ]] && echo 'last friday' || echo 'yesterday'; }; git log --all --since=\"$(f)\" --author=$(git config user.email)"

    # Commit

    # ac - add the current working tree changes to the previous commit
    ac = !git add . && git commit --am
    # amend - amend commit and show the modified chunks
    amend = commit --amend -v
    # ci - commit with showing the chunks
    ci = commit -v
    # new - Show last commit without merges in one line with abbreviated commithash
    new = log --abbrev-commit --pretty=oneline --no-merges @{1}..
    # pend - Show pending commits
    pend = log @{upstream}..

    # Diffs

    # d - Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # df - Changes between the index and your last commit; what you would be committing if you run "git commit" without "-a" option.
    df = diff --cached
    # wdiff - show the differences colored in line
    wdiff = diff --color-words

    # Find

    # ack - Find file content grouped by files
    ack = -c color.grep.filename='bold green' -c color.grep.match='black yellow' grep --break --heading -n
    # fb - Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # ft - Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # fc - Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %C(blue)%ad  %C(reset)%s%C(green)  [%cn] %C(auto)%d' --decorate --date=short -S$1; }; f"
    # fm - Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %C(blue)%ad  %C(reset)%s%C(green)  [%cn] %C(auto)%d' --decorate --date=short --grep=$1; }; f"
    # find - Find text in commit names. shorthash, name, shortmessage, relativedate
    find = log --all --pretty=format:\"%C(yellow)%h%C(reset) %C(blue)%ar%C(reset) %s %C(green)(%an)%C(reset)\n%b\" --name-status --grep
    # locate - Find file name
    locate = "!git ls-files | grep --color=auto"

    # Full histories

    # lol - oneline graph, (decorate) abbr commit shortmessage
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
    # lola - all branches oneline graph, (decorate) abbr commit shortmessage
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    # logr - Relative date log (oneline shorthash, relativedate, (decoration), shortmessage, name)
    logr = log --graph --pretty=format:\"%C(yellow)%h%C(reset) %C(blue)%cr%C(reset) %C(auto)%d %s %C(green)(%cn)%C(reset)\"
    # loge - Exact date log (oneline shorthash, relativedate, (decoration), shortmessage, name)
    loge = log --graph --pretty=format:\"%C(yellow)%h%C(reset) %C(blue)%ci%C(reset) %C(auto)%d%C(reset) %s %C(green)(%cn)%C(reset)\"
    # logn - Exact date log (oneline shorthash, relativedate, name, (decoration), shortmessage)
    logn = log --graph --pretty=format:\"%C(yellow)%h%C(reset) %C(blue)%ci%C(reset) %C(green)(%cn)%C(reset) %C(auto)%d%C(reset) %s\"
    # ll - oneline shorthash (decorate) message, username, file num stats
    ll = log --pretty=format:"%C(yellow)%h%C(auto)%d\\ %C(reset)%s\\ %C(green)[%cn]%C(reset)" --decorate --numstat
    # logfile - Show git log with chunk info
    logfile = log -u
    # logf - log with separate commit/author data (different when patches applied)
    logf = log --pretty=fuller
    # fhistory - log the commits and amount of changes of a file. e.g.: `git fhistory README.md`
    fhistory = log --pretty=format:"%h%x09%an%x09%ad%x09%s" --date=iso --follow --stat --

    # Ignore
    unignore = update-index --no-assume-unchanged
    ignore = update-index --assume-unchanged
    ignored = ls-files -v &#124; grep '^\[\[:lower:\]\]'

    # Simple abbreviations

    br = branch
    ba = branch --all
    cp = cherry-pick
    cpx = cherry-pick -x # include commit hash in the commit as a reference
    mr = merge
    mt = mergetool
    st = status
    co = checkout
    # cop - Check out the previous branch. Shorter version: `git checkout -`
    cop = checkout @{-1}
    cr = clone --recursive
    # fa - Fetch all remotes
    fa = fetch --all

    # Stash related

    sa = stash apply
    sb = stash branch
    sd = stash drop
    sl = stash list
    sp = stash pop
    ss = stash push
    ssh = stash show
    # ssu - stash untracked and unstaged files
    ssu = stash -k -u
    # ssp - stash only selected chunks
    ssp = stash --patch

    # Patches

    # pcst - Create a patch from the top of the stash (https://stackoverflow.com/a/22819771/9174012)
    pcst = !git stash show -p > laststash.patch && git diff `git hash-object -t tree /dev/null` stash^3 >> laststash.patch
    # pclc - Create a patch from the last commit
    pclc = !git format-patch -n HEAD^ --stdout > ./lastcommit.patch
    # pcwt - Create a patch from the current working tree, with untracked files
    pcwt = !git add . && git diff HEAD > working_tree.patch | git reset
    # pcwt - Create a patch from the staged changes
    pcsg = !git diff --cached HEAD > staged.patch

    # Subtrees

    # sba - "subtree add": 'git sba <destination folder> <repository uri>'
    sba = "!f() { git subtree add --prefix $1 $2 master --squash; }; f"
    # sbu - "subtree update" 'git sbu <destination folder> <repository uri>'
    sbu = "!f() { git subtree pull --prefix $1 $2 master --squash; }; f"

    # Submodules

    # spull - auto-update submodules on pull
    spull = "__git_spull() { git pull \"$@\" && git submodule sync --recursive && git submodule update --init --recursive; }; __git_spull"

    # SVN

    # svpull - git pull in an svn repository
	svpull = !git svn fetch && git-svn rebase
    # svpull - git push in an svn repository
    svpush = !git svn dcommit

    # Tags

    # taglist - list tags with the correspondent commits
    taglist = show-ref --tags
    # tagdel - delete a local tag: 'git tagdel tagName' (remote delete: git push --delete origin tagName)
    tagdel = tag -d

    # Typos

    # git - Run the command even if you have multiple git prefix in it.
    git = !exec git
[color]
    ui = auto
[color "diff"]
	whitespace = red reverse
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[diff]
    renames = copy
    algorithm = patience
    submodule = log
	tool = p4mergetool
[merge]
	tool = p4mergetool
    conflictstyle = diff3
    log = true
    stat = true
    verbosity = 2
[push]
    default = simple
[stash]
    showPatch = true
[apply]
    whitespace = fix
[help]
    autocorrect = 1
[rerere]
    enabled = 1
[credential]
	helper = cache --timeout=3600
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[status]
	submoduleSummary = true
[fetch]
	prune = true
[mergetool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$REMOTE $PWD/$LOCAL $PWD/$MERGED
	trustExitCode = false
[mergetool]
	keepBackup = false
[difftool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $LOCAL $REMOTE
